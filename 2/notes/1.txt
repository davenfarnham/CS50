files:
	/* stack and memory */
	(1) game asking about size of stack frame (subtract one function from the other)
	
	/* arrays */
	(2) Show size of array and multi dimensional array are the same. Given a1[10] and a2[2][5]
	    show with pointers that a1[7] == a[1][2]

	/* cmd line and arrays */
	(3) Ask for user input for size of array, then loop to prompt user for input, finally
	    summing up all the user's input (can redirect a bunch of numbers from another (3.1) file
            to check.

	/* arrays, cmd line, functions, and compilation */
	(4) Meeseeks problem. Have them take in 4 cmd line arguments [./season] + "Rick" + 
	    "&" + "Morty". Without changing main or adding an additional function to this file, 
	    return a string by indexing into the cmd line arguments that spells out "Meeseeks".
	    This requires they index into argv[] as a multidimensional array, write a function
	    in a different file, create a header file, include it, change the Makefile, and run. 

- Intro
	- About me

	- Names and Background 
		- go around the room and have everyone say their name, house, something 
		  interesting, and the info of everyone who went before them.

	- Grading
		- talk about scope, correctness, design, style
		- use check50, use style50
		- always turn in some version of your problem set by Friday at noon

	- Questions
		- ask for questions about any logistical stuff

- Arrays (they should've seen this in lecture)

	- why do we study C?
		- it allows us access to memory - more so than other languages (except assembly).

		- memory is allocated in two ways
			- this comes in the form of both implicit memory allocation and
			  explicit memory allocation.
				- implicit: everytime you call a function
				- explicit: using something like malloc()

		- we study C because there is basically no better way to learn about systems.
		  Today we're going to dive into systems and specifically how things like functions
		  and arrays are laid out in memory.

	- what is an array?
		- it's a contiguous block of memory.
		- this makes it super easy for me to know where things are.
		- for example, if I know the array starts at memory location 0, and it's full
		  of ints, how big is an int? 4 bytes. So in memory, memory address 0 points to
		  the first element in the array. 0 + 4 = the second element in the array, etc.

	- to declare an array, you can do either:

		- int array[5]; 
			- array[0] = 1; array[1] = 2; etc...
		- int array[] = {1, 2, 3, 4, 5};
		- int array[5] = {1, 2, 3}; // other values zero'd

	- indexing into an array with pointers
		- an array is really just a pointer to a block of memory. So if I were to print out the array 
		  from above I'd get a memory location. I can then add or subtract from that memory location.
		  The computer knows, though, that if I have an int array and add 1, that will add 4 bytes.
		  If I have a char array and add 1, then that will only add one byte.  

	- multidimensional
		- a multidimensional array is just like a normal array: arrays.c

	- stack
		- stack as a data structure
		- how it works when a function, like main(), makes a function call 
		- see paper

- Command Line Arguments
	- change the main function from "int main(void)" to "int main(int argc, char* argv[])"
		- Let's break down char* argv[]:
			- notice that argv[] is an array. char* argv[], therefore, is an array 
			  of char*. Arrays are really just pointers, so this is basically a multidimensional
			  array.
			- you could, for example, change char* argv[] to char** argv	

	- placement in memory (can I change them?)
		- yep, you totally can
		- you can't change regular char* strings, though, since they're placed in read only memory

- Functions
	- modularity
		- provides a way to reuse code

	- There're multiple ways to do this. You can simply put helper functions in the same file, adding
          a prototype to the top of the function
		- have students try to solve: sum.c

	- Or, you can place your helper functions in different files
		- If you do this, you should create header files in addition to the .c files, then modify any
		  make files to link in additional files when compiling.
		- /hard/sum.c

- Compiling
	- make files
		- have to use tabs
		- I'm using gcc, but clang is basically the same thing, it's just a different kind of compiler

	- functions & different files

	- compilation process
		- preprocessor -> compiler -> assembler -> linker
			- preprocessor: it'll basically copy and paste any '#' values into your file
			- compiler: turns your code into assembly level code
			- assembler: takes that assembly code and turns it into machine code
			- linker: links in other files' object code for use

	- assembly (change -O0 flag to -O3)
		- use -S to output assembly

	- have them try: season.c

- Pset (if we get here)
	- Ascii values

	- modulo

	- Hacker
